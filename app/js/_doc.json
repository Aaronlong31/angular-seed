[
    {
        "requestMethod": "POST",
        "path": "/badKeyword",
        "description": "新增屏蔽关键字",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "",
        "auth": "addBadKeyword",
        "params": "",
        "method": "BadKeywordController.addBadKeyword(BadKeywordController$BadKeywordForm)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "keyword",
                "type": null,
                "required": true
            },
            {
                "name": "score",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.badkeyword.ExceededMaxCountException",
                "name": "ExceededMaxCountException",
                "httpStatus": 403,
                "code": 403,
                "message": "EXCEEDED_MAX_COUNT"
            },
            {
                "clazz": "com.liba.api.badkeyword.BadKeywordExistsException",
                "name": "BadKeywordExistsException",
                "httpStatus": 403,
                "code": 403,
                "message": "BAD_KEYWORD_EXISTS"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "KEYWORD_BLANK"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "KEYWORD_EXCEED_MAX_LENGTH"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "SCORE_NULL"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "SCORE_INVALID"
            }
        ]
    },
    {
        "requestMethod": "POST",
        "path": "/badKeyword",
        "description": "过滤过则测试",
        "header": "",
        "consume": "",
        "produce": "",
        "auth": null,
        "params": "_service=test",
        "method": "BadKeywordController.testTitle(String)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/badKeyword",
        "description": "刷新屏蔽关键字",
        "header": "",
        "consume": "",
        "produce": "",
        "auth": "reloadBadKeyword",
        "params": "_service=reload",
        "method": "BadKeywordController.reload()",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "DELETE",
        "path": "/badKeyword/{keyword}",
        "description": "删除屏蔽关键字",
        "header": "",
        "consume": "",
        "produce": "",
        "auth": "deleteBadKeyword",
        "params": "",
        "method": "BadKeywordController.deleteBadKeyword(String)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "PUT",
        "path": "/badKeyword/{keyword}",
        "description": "修改屏蔽关键字",
        "header": "",
        "consume": "",
        "produce": "",
        "auth": "updateBadKeyword",
        "params": "",
        "method": "BadKeywordController.updateBadKeyword(String,int)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "score",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/banIp",
        "description": "新增禁止发帖ip",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "",
        "auth": "banIp",
        "params": "ip && startTime && endTime",
        "method": "BanIpController.banIp(BanIpForm)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "ip",
                "type": null,
                "required": true
            },
            {
                "name": "startTime",
                "type": null,
                "required": true
            },
            {
                "name": "endTime",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "ERR_IP_FORMAT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "IP_BLANK"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "START_TIME_NULL"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "END_TIME_NULL"
            }
        ]
    },
    {
        "requestMethod": "POST",
        "path": "/banMobile",
        "description": "新增手机号码黑名单",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "createBanMobile",
        "params": "",
        "method": "BanMobileController.create(String)",
        "successStatus": "201",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.banmobile.BanMobileException",
                "name": "BanMobileException",
                "httpStatus": 400,
                "code": 400,
                "message": "ILLEGAL_MOBILE"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/forum",
        "description": "根据多个id查找板块",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "findForumsByIds",
        "params": "",
        "method": "QueryForumController.findByIds(Integer[])",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "id",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/forum",
        "description": "新建版块",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "application/json",
        "auth": "createForum",
        "params": "",
        "method": "CreateForumController.createForum(CreateForumForm)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "name",
                "type": null,
                "required": true
            },
            {
                "name": "accessRule",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_FORUM_NAME"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/forum/tag",
        "description": "根据多个版块id查找tag",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "findTagsByForumIds",
        "params": "",
        "method": "QueryTagController.queryByForumIds(Integer[])",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "forumId",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/forum/{forumId}/tag",
        "description": "查找多个标签",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "findTagByForumId",
        "params": "",
        "method": "QueryTagController.query(int,Long[])",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "id",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/forum/{forumId}/tag",
        "description": "新建标签",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "application/json",
        "auth": "createTag",
        "params": "",
        "method": "CreateTagController.create(int,String)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "name",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.tag.DuplicateTagNameException",
                "name": "DuplicateTagNameException",
                "httpStatus": 400,
                "code": 400,
                "message": "DUPLICATE_TAG_NAME"
            }
        ]
    },
    {
        "requestMethod": "DELETE",
        "path": "/forum/{forumId}/tag/{tagId}",
        "description": "删除标签",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "deleteTag",
        "params": "",
        "method": "DeleteTagController.deleteTagByForumIdAndTagId(int,long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "PUT",
        "path": "/forum/{forumId}/tag/{tagId}",
        "description": "更新标签名称",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "application/json",
        "auth": "updateTagName",
        "params": "",
        "method": "UpdateTagController.updateTagName(int,int,String)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "name",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.tag.DuplicateTagNameException",
                "name": "DuplicateTagNameException",
                "httpStatus": 400,
                "code": 400,
                "message": "DUPLICATE_TAG_NAME"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/forum/{forumId}/tag/{tagId}/topic",
        "description": "查找含有某一标签的主题",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findTopicsByForumIdAndTagId",
        "params": "",
        "method": "FindTopicController.findByForumAndTagId(int,long,Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 40,
            "defaultPageNo": 1,
            "defaultOrderBy": "lastReplyTime",
            "defaultOrderSort": "desc",
            "supportedOrderBy": [
                "lastReplyTime",
                "postTime"
            ],
            "maxPageSize": 100
        },
        "paramInfos": [
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/forum/{forumId}/topic",
        "description": "查找某一板块下的所有主题",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findTopicsByForumId",
        "params": "!tagId",
        "method": "FindTopicController.findByForumId(int,Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 40,
            "defaultPageNo": 1,
            "defaultOrderBy": "lastReplyTime",
            "defaultOrderSort": "desc",
            "supportedOrderBy": [
                "postTime",
                "lastReplyTime",
                "replyNum",
                "clickNum",
                "topicId"
            ],
            "maxPageSize": 100
        },
        "paramInfos": [
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.forum.query.ForumNotFoundException",
                "name": "ForumNotFoundException",
                "httpStatus": 400,
                "code": 400,
                "message": "FORUM_NOT_FOUND"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/forum/{forumId}/topic",
        "description": "查找某一板块下对应一批标签下的所有主题",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findTopicsByForumIdAndTagIds",
        "params": "tagId",
        "method": "FindTopicController.findByForumIdAndTagIds(int,Long[],Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 40,
            "defaultPageNo": 1,
            "defaultOrderBy": "lastReplyTime",
            "defaultOrderSort": "desc",
            "supportedOrderBy": [
                "postTime",
                "lastReplyTime",
                "topicId"
            ],
            "maxPageSize": 100
        },
        "paramInfos": [
            {
                "name": "tagId",
                "type": null,
                "required": true
            },
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.forum.query.ForumNotFoundException",
                "name": "ForumNotFoundException",
                "httpStatus": 400,
                "code": 400,
                "message": "FORUM_NOT_FOUND"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/forum/{forumId}/topic",
        "description": "查找某一板块下的主题，按照topicId排序，查找指定topicId后的指定条数",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findTopicsByForumId",
        "params": "_start",
        "method": "FindTopicController.findTopicIdsByForumIdUseQuerySlice(int,QuerySlice)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/forum/{id}",
        "description": "根据id查找板块",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "findForumById",
        "params": "",
        "method": "QueryForumController.findById(int)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "PUT",
        "path": "/forum/{id}",
        "description": "更新板块",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "application/json",
        "auth": "updateForum",
        "params": "",
        "method": "UpdateForumController.update(int,String,ForumAccessRule)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "name",
                "type": null,
                "required": false
            },
            {
                "name": "accessRule",
                "type": null,
                "required": false
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/mobileVerification",
        "description": "发送手机验证码",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "createMobileVerification",
        "params": "!_service",
        "method": "CreateMobileVerificationController.createVerification(CreateMobileVerificationForm)",
        "successStatus": "201",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "mobile",
                "type": null,
                "required": true
            },
            {
                "name": "ip",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.sms.IpSMSExceedException",
                "name": "IpSMSExceedException",
                "httpStatus": 403,
                "code": 403,
                "message": "TOO_MANY_SMS_IP"
            },
            {
                "clazz": "com.liba.api.mobileverification.create.BanMobileException",
                "name": "BanMobileException",
                "httpStatus": 403,
                "code": 403,
                "message": "MOBILE_BANNED"
            },
            {
                "clazz": "com.liba.api.mobileverification.create.SendSMSFailException",
                "name": "SendSMSFailException",
                "httpStatus": 500,
                "code": 500,
                "message": "SEND_SMS_FAIL"
            },
            {
                "clazz": "com.liba.api.sms.MobileSMSExceedException",
                "name": "MobileSMSExceedException",
                "httpStatus": 403,
                "code": 403,
                "message": "TOO_MANY_SMS_MOBILE"
            },
            {
                "clazz": "java.io.UnsupportedEncodingException",
                "name": "UnsupportedEncodingException",
                "httpStatus": 500,
                "code": 500,
                "message": "UNSUPPORTED_ENCODING"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "MOBILE_BLANK"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "ERR_MOBILE_FORMAT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "IP_BLANK"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "ERR_IP_FORMAT"
            }
        ]
    },
    {
        "requestMethod": "POST",
        "path": "/mobileVerification/{id}",
        "description": "验证手机验证码",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "checkMobileVerification",
        "params": "_service=verify",
        "method": "CheckMobileVerificationController.verify(int,String,String)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.mobileverification.verify.VerificationDoubleCheckException",
                "name": "VerificationDoubleCheckException",
                "httpStatus": 403,
                "code": 403,
                "message": "DOUBLE_CHECK"
            },
            {
                "clazz": "com.liba.api.mobileverification.verify.VerificationTimeoutException",
                "name": "VerificationTimeoutException",
                "httpStatus": 403,
                "code": 403,
                "message": "TIME_OUT"
            },
            {
                "clazz": "com.liba.api.mobileverification.verify.MobileNotMatchException",
                "name": "MobileNotMatchException",
                "httpStatus": 403,
                "code": 403,
                "message": "MOBILE_NOT_MATCH"
            },
            {
                "clazz": "com.liba.api.mobileverification.verify.InvalidMobileVerificationIdException",
                "name": "InvalidMobileVerificationIdException",
                "httpStatus": 404,
                "code": 404,
                "message": "VERIFICATION_NOT_FOUND"
            },
            {
                "clazz": "com.liba.api.mobileverification.verify.UpdateEntityFailException",
                "name": "UpdateEntityFailException",
                "httpStatus": 500,
                "code": 500,
                "message": "UPDATE_AUTH_STATE_FAIL"
            },
            {
                "clazz": "com.liba.api.mobileverification.verify.VerifyCodeNotMatchException",
                "name": "VerifyCodeNotMatchException",
                "httpStatus": 403,
                "code": 403,
                "message": "CODE_NOT_MATCH"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/monitor/http/snapshot",
        "description": null,
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": null,
        "params": "",
        "method": "GetStatisticsController.findAll(long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/monitor/http/{id}",
        "description": null,
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": null,
        "params": "",
        "method": "GetStatisticsController.findById(String,long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/openIdSession",
        "description": "根据openId登录",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "loginByOpenId",
        "params": "",
        "method": "LoginByOpenIdController.login(LoginByOpenIdController$Form)",
        "successStatus": "201",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "code",
                "type": null,
                "required": true
            },
            {
                "name": "provider",
                "type": null,
                "required": true
            },
            {
                "name": "redirectUri",
                "type": null,
                "required": true
            },
            {
                "name": "ip",
                "type": null,
                "required": true
            },
            {
                "name": "agent",
                "type": null,
                "required": true
            },
            {
                "name": "autoBindSameGroup",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.session.BanUserException",
                "name": "BanUserException",
                "httpStatus": 403,
                "code": 403,
                "message": "BAN_USER"
            },
            {
                "clazz": "com.liba.api.openidsession.UnknownOAuthProviderException",
                "name": "UnknownOAuthProviderException",
                "httpStatus": 400,
                "code": 400,
                "message": "UNKNOWN_OAUTH_PROVIDER"
            },
            {
                "clazz": "com.liba.api.session.SessionIdGeneratingException",
                "name": "SessionIdGeneratingException",
                "httpStatus": 500,
                "code": 500,
                "message": "GENERATE_FAIL_RETRY_LATER"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_CODE"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_PROVIDER"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_REDIRECT_URI"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_IP"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "ERR_IP_FORMAT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_AGENT"
            }
        ]
    },
    {
        "requestMethod": "POST",
        "path": "/openIdSession",
        "description": "绑定openId到会员",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "bindOpenIdToUser",
        "params": "_service=bindLoginUser",
        "method": "BindUserOpenIdController.bindLoginUserByCodeAndUserId(String,long,String,String)",
        "successStatus": "201",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.openidsession.DuplicateBindException",
                "name": "DuplicateBindException",
                "httpStatus": 400,
                "code": 400,
                "message": "DUPLICATE_BIND"
            },
            {
                "clazz": "com.liba.api.openidsession.DuplicateProviderForOneUserException",
                "name": "DuplicateProviderForOneUserException",
                "httpStatus": 400,
                "code": 400,
                "message": "BIND_DUPLICATE_PROVIDER_FOR_ONE_USER"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/openIdSession/accessToken",
        "description": "根据userId和providerName获取accessToken",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "getAccessToken",
        "params": "userId && providerName",
        "method": "GetAccessTokenController.getAccessTokenByUserIdAndProviderName(long,String)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "userId",
                "type": null,
                "required": true
            },
            {
                "name": "providerName",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/openIdSession/accessToken/{openSessionId}",
        "description": "根据openSessionId获取accessToken",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "getAccessToken",
        "params": "",
        "method": "GetAccessTokenController.getAccessToken(long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/openIdSession/provider",
        "description": "获取所有openId提供方的验证链接",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "getAllOAuthUrls",
        "params": "",
        "method": "UserAuthURLController.getALLUserAuthURLs(String)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "redirectUri",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/openIdSession/provider/{provider}",
        "description": "获取某一openId提供方的验证链接",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "getOneOAuthUrls",
        "params": "",
        "method": "UserAuthURLController.getUserAuthURL(String,String)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "redirectUri",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.openidsession.UnknownOAuthProviderException",
                "name": "UnknownOAuthProviderException",
                "httpStatus": 400,
                "code": 400,
                "message": "UNKNOWN_OAUTH_PROVIDER"
            }
        ]
    },
    {
        "requestMethod": "POST",
        "path": "/openIdSession/{openSessionId}",
        "description": "绑定openId到篱笆会员",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "bindOpenIdToUserAndLogin",
        "params": "_service=bind",
        "method": "BindingUserAndLoginController.bindUserAndLogin(long,BindingUserAndLoginController$Form)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "username",
                "type": null,
                "required": true
            },
            {
                "name": "password",
                "type": null,
                "required": true
            },
            {
                "name": "ip",
                "type": null,
                "required": true
            },
            {
                "name": "agent",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.session.WrongPasswordException",
                "name": "WrongPasswordException",
                "httpStatus": 403,
                "code": 403,
                "message": "WRONG_PASSWORD"
            },
            {
                "clazz": "com.liba.api.session.WrongUserNameException",
                "name": "WrongUserNameException",
                "httpStatus": 403,
                "code": 403,
                "message": "WRONG_USERNAME"
            },
            {
                "clazz": "com.liba.api.session.BanUserException",
                "name": "BanUserException",
                "httpStatus": 403,
                "code": 403,
                "message": "USER_BANNED"
            },
            {
                "clazz": "com.liba.api.openidsession.DuplicateBindException",
                "name": "DuplicateBindException",
                "httpStatus": 400,
                "code": 400,
                "message": "DUPLICATE_BIND"
            },
            {
                "clazz": "com.liba.api.openidsession.DuplicateProviderForOneUserException",
                "name": "DuplicateProviderForOneUserException",
                "httpStatus": 400,
                "code": 400,
                "message": "BIND_DUPLICATE_PROVIDER_FOR_ONE_USER"
            },
            {
                "clazz": "com.liba.api.session.SessionIdGeneratingException",
                "name": "SessionIdGeneratingException",
                "httpStatus": 500,
                "code": 500,
                "message": "GENERATE_FAIL_RETRY_LATER"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_USERNAME"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_PASSWORD"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_IP"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "ERR_IP_FORMAT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_AGENT"
            }
        ]
    },
    {
        "requestMethod": "POST",
        "path": "/openIdSession/{openSessionId}",
        "description": "根据openId注册篱笆会员",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "registerUserAndBindAndLogin",
        "params": "_service=register",
        "method": "RegisterUserAndLoginController.registerUserAndLogin(long,RegisterUserAndLoginController$Form)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "username",
                "type": null,
                "required": true
            },
            {
                "name": "ip",
                "type": null,
                "required": true
            },
            {
                "name": "agent",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.user.register.UserNameBannedException",
                "name": "UserNameBannedException",
                "httpStatus": 403,
                "code": 403,
                "message": "USER_NAME_BANNED"
            },
            {
                "clazz": "com.liba.api.user.register.DuplicateUserNameException",
                "name": "DuplicateUserNameException",
                "httpStatus": 403,
                "code": 403,
                "message": "DUPLICATE_USER_NAME"
            },
            {
                "clazz": "com.liba.api.openidsession.OpenIdUnbindException",
                "name": "OpenIdUnbindException",
                "httpStatus": 400,
                "code": 400,
                "message": "UNBOUND_OPEN_ID"
            },
            {
                "clazz": "com.liba.api.openidsession.DuplicateBindException",
                "name": "DuplicateBindException",
                "httpStatus": 400,
                "code": 400,
                "message": "DUPLICATE_BIND"
            },
            {
                "clazz": "com.liba.api.openidsession.DuplicateProviderForOneUserException",
                "name": "DuplicateProviderForOneUserException",
                "httpStatus": 400,
                "code": 400,
                "message": "BIND_DUPLICATE_PROVIDER_FOR_ONE_USER"
            },
            {
                "clazz": "com.liba.api.session.SessionIdGeneratingException",
                "name": "SessionIdGeneratingException",
                "httpStatus": 500,
                "code": 500,
                "message": "GENERATE_FAIL_RETRY_LATER"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_USERNAME"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "INVALID_NAME_LENGTH"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "INVALID_NAME_FORMAT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_IP"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "ERR_IP_FORMAT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_AGENT"
            }
        ]
    },
    {
        "requestMethod": "POST",
        "path": "/recoverReply",
        "description": "找回被删除的回复, 返回找回失败的回复编号",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "application/json",
        "auth": "recoverReply",
        "params": "",
        "method": "RecoverReplyController.recover(Long[])",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "id",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/recoverTopic",
        "description": "找回被删除的主题",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "application/json",
        "auth": "recoverTopic",
        "params": "",
        "method": "RecoverTopicController.recover(Long[],TopicAccessRule)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "id",
                "type": null,
                "required": true
            },
            {
                "name": "accessRule",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/reply/{replyId}",
        "description": "查找回帖",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "findReplyById",
        "params": "",
        "method": "FindReplyController.findById(long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.reply.update.ReplyIdBlankException",
                "name": "ReplyIdBlankException",
                "httpStatus": 400,
                "code": 400,
                "message": "REPLY_ID_BLANK"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/session",
        "description": "根据会员id查找session",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findSessionByUserId",
        "params": "userId",
        "method": "FindSessionController.findByUserId(Long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/session",
        "description": "根据ip查找session",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findSessionByIp",
        "params": "ip",
        "method": "FindSessionController.findByIp(String)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/session",
        "description": "统计指定秒内被更新过session的user",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "countRecentLoginUsers",
        "params": "_service=countUsers",
        "method": "StatisticsServiceController.countUserId(int)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "seconds",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/session",
        "description": "统计指定秒内被更新过的session",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "countRecentSessions",
        "params": "_service=countSessions",
        "method": "StatisticsServiceController.countSessions(int)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "seconds",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/session",
        "description": "用用户名和密码登录，创建session",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "application/json",
        "auth": "loginUser",
        "params": "",
        "method": "LoginController.login(LoginForm)",
        "successStatus": "201",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "username",
                "type": null,
                "required": true
            },
            {
                "name": "ip",
                "type": null,
                "required": true
            },
            {
                "name": "agent",
                "type": null,
                "required": true
            },
            {
                "name": "password",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.session.WrongUserNameException",
                "name": "WrongUserNameException",
                "httpStatus": 403,
                "code": 403,
                "message": "WRONG_USERNAME"
            },
            {
                "clazz": "com.liba.api.session.WrongPasswordException",
                "name": "WrongPasswordException",
                "httpStatus": 403,
                "code": 403,
                "message": "WRONG_PASSWORD"
            },
            {
                "clazz": "com.liba.api.session.BanUserException",
                "name": "BanUserException",
                "httpStatus": 403,
                "code": 403,
                "message": "BAN_USER"
            },
            {
                "clazz": "com.liba.api.session.SessionIdGeneratingException",
                "name": "SessionIdGeneratingException",
                "httpStatus": 500,
                "code": 500,
                "message": "GENERATE_FAIL_RETRY_LATER"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_USERNAME"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "INVALID_USERNAME_LENGTH"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_IP"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "ERR_IP_FORMAT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_AGENT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_PASSWORD"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/session/{sid}",
        "description": "根据sessionId查找session",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": null,
        "params": "",
        "method": "FindSessionController.findById(String)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "DELETE",
        "path": "/session/{sid}",
        "description": "登出销毁session",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "logoutUser",
        "params": "",
        "method": "LogoutController.logout(String)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "PUT",
        "path": "/session/{sid}",
        "description": "用户id登录，创建session",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "application/json",
        "auth": "loginUserByOldMobile",
        "params": "",
        "method": "LoginController.loginFromOldMobile(LoginForm,String)",
        "successStatus": "201",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "username",
                "type": null,
                "required": true
            },
            {
                "name": "ip",
                "type": null,
                "required": true
            },
            {
                "name": "agent",
                "type": null,
                "required": true
            },
            {
                "name": "password",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.session.WrongUserNameException",
                "name": "WrongUserNameException",
                "httpStatus": 403,
                "code": 403,
                "message": "WRONG_USERNAME"
            },
            {
                "clazz": "com.liba.api.session.WrongPasswordException",
                "name": "WrongPasswordException",
                "httpStatus": 403,
                "code": 403,
                "message": "WRONG_PASSWORD"
            },
            {
                "clazz": "com.liba.api.session.BanUserException",
                "name": "BanUserException",
                "httpStatus": 403,
                "code": 403,
                "message": "BAN_USER"
            },
            {
                "clazz": "com.liba.api.session.SessionIdGeneratingException",
                "name": "SessionIdGeneratingException",
                "httpStatus": 500,
                "code": 500,
                "message": "GENERATE_FAIL_RETRY_LATER"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_USERNAME"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "INVALID_USERNAME_LENGTH"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_IP"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "ERR_IP_FORMAT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_AGENT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NEED_PASSWORD"
            }
        ]
    },
    {
        "requestMethod": "PUT",
        "path": "/session/{sid}/lastVisitTime",
        "description": "更新session的最后访问时间",
        "header": "",
        "consume": "",
        "produce": "",
        "auth": "updateSessionLastVisitTime",
        "params": "",
        "method": "UpdateLastVisitTimeController.update(String)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "DELETE",
        "path": "/tag/{tagId}",
        "description": "删除标签",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "deleteTag",
        "params": "",
        "method": "DeleteTagController.deleteTagByTagId(long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/tag/{tagId}/topic",
        "description": "查找含有某一标签的主题",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findTopicsByForumIdAndTagId",
        "params": "",
        "method": "FindTopicController.findByTagId(long,Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 40,
            "defaultPageNo": 1,
            "defaultOrderBy": "lastReplyTime",
            "defaultOrderSort": "desc",
            "supportedOrderBy": [
                "lastReplyTime",
                "postTime"
            ],
            "maxPageSize": 100
        },
        "paramInfos": [
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/tag/{tagId}/topic",
        "description": "查找含有某一标签的主题, 从_startId处查找_count条或者直到_endId",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findTopicsByForumIdAndTagId",
        "params": "_start",
        "method": "FindTopicController.findByTagIdUseSlice(long,QuerySlice)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/topic",
        "description": "查找多个主题",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findTopicsByIds",
        "params": "id",
        "method": "FindTopicController.findByIds(Long[],Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 40,
            "defaultPageNo": 1,
            "defaultOrderBy": "lastReplyTime",
            "defaultOrderSort": "desc",
            "supportedOrderBy": [
                "lastReplyTime",
                "inputOrder"
            ],
            "maxPageSize": 100
        },
        "paramInfos": [
            {
                "name": "id",
                "type": null,
                "required": true
            },
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/topic",
        "description": "新建主题",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "application/json",
        "auth": "createTopic",
        "params": "",
        "method": "CreateTopicController.create(CreateTopicForm)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "forumId",
                "type": null,
                "required": true
            },
            {
                "name": "posterId",
                "type": null,
                "required": true
            },
            {
                "name": "title",
                "type": null,
                "required": true
            },
            {
                "name": "content",
                "type": null,
                "required": true
            },
            {
                "name": "ip",
                "type": null,
                "required": true
            },
            {
                "name": "accessRule",
                "type": null,
                "required": true
            },
            {
                "name": "attachId",
                "type": null,
                "required": true
            },
            {
                "name": "poll",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.topic.create.UserNotExistException",
                "name": "UserNotExistException",
                "httpStatus": 400,
                "code": 400,
                "message": "USER_NOT_EXIST"
            },
            {
                "clazz": "com.liba.api.bbsservice.topic.create.BanIpException",
                "name": "BanIpException",
                "httpStatus": 403,
                "code": 403,
                "message": "BAN_IP"
            },
            {
                "clazz": "com.liba.api.bbsservice.forum.query.ForumNotFoundException",
                "name": "ForumNotFoundException",
                "httpStatus": 400,
                "code": 400,
                "message": "FORUM_NOT_FOUND"
            },
            {
                "clazz": "com.liba.api.bbsservice.topic.CreateTopicFailedException",
                "name": "CreateTopicFailedException",
                "httpStatus": 400,
                "code": 400,
                "message": "CREATE_TOPIC_FAILED"
            },
            {
                "clazz": "com.liba.api.bbsservice.topic.create.TopicTitleHasBadInfoException",
                "name": "TopicTitleHasBadInfoException",
                "httpStatus": 403,
                "code": 403,
                "message": "HAS_BAD_INFO"
            },
            {
                "clazz": "com.liba.api.bbsservice.topic.create.PostTopicTooFastException",
                "name": "PostTopicTooFastException",
                "httpStatus": 400,
                "code": 400,
                "message": "TOO_FAST"
            },
            {
                "clazz": "com.liba.api.bbsservice.DuplicatePostException",
                "name": "DuplicatePostException",
                "httpStatus": 400,
                "code": 400,
                "message": "DUPLICATE_CONTENT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "FORUM_ID_NULL"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "POSTER_ID_NULL"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "TITLE_BLANK"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "CONTENT_BLANK"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "IP_BLANK"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/topic/{id}",
        "description": "查找主题",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findTopicById",
        "params": "",
        "method": "FindTopicController.findById(long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.topic.find.TopicNotFoundException",
                "name": "TopicNotFoundException",
                "httpStatus": 404,
                "code": 404,
                "message": "TOPIC_NOT_FOUND"
            }
        ]
    },
    {
        "requestMethod": "POST",
        "path": "/topic/{id}",
        "description": "更新主题标题",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "",
        "auth": "updateTopicTitle",
        "params": "_service=updateTitle",
        "method": "UpdateTopicController.updateTitle(long,String)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "title",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/topic/{id}",
        "description": "移动主题",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "application/json",
        "auth": "moveTopic",
        "params": "_service=move",
        "method": "UpdateTopicController.move(long,int)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "toForumId",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "PUT",
        "path": "/topic/{id}",
        "description": "更新主题访问规则",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "application/json",
        "auth": "updateTopicAccessRule",
        "params": "",
        "method": "UpdateTopicAccessRuleController.updateAccessRuleById(long,TopicAccessRule)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "accessRule",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "PUT",
        "path": "/topic/{id}/clickTimes",
        "description": "更新主题点击数",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "application/json",
        "auth": "updateTopicClickTimes",
        "params": "",
        "method": "UpdateTopicController.updateClickTimes(long,int)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "increment",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/topic/{id}/content",
        "description": "查找主题内容",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findTopicContent",
        "params": "",
        "method": "FindTopicController.findTopicContent(long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.topic.find.TopicNotFoundException",
                "name": "TopicNotFoundException",
                "httpStatus": 404,
                "code": 404,
                "message": "TOPIC_NOT_FOUND"
            }
        ]
    },
    {
        "requestMethod": "PUT",
        "path": "/topic/{topicId}/repairFloor",
        "description": "修复楼层",
        "header": "",
        "consume": "",
        "produce": "",
        "auth": null,
        "params": "",
        "method": "RepairTopicFloorController.updateFloor(long,boolean)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "ignoreDeleted",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.topic.find.TopicNotFoundException",
                "name": "TopicNotFoundException",
                "httpStatus": 404,
                "code": 404,
                "message": "TOPIC_NOT_FOUND"
            },
            {
                "clazz": "com.liba.api.bbsservice.topic.repairfloor.RepairFloorLockedException",
                "name": "RepairFloorLockedException",
                "httpStatus": 423,
                "code": 423,
                "message": "REPAIR_FLOOR_LOCKED"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/topic/{topicId}/reply",
        "description": "查找某一主题下的所有回帖",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "findRepliesByTopicId",
        "params": "",
        "method": "FindReplyController.findByTopicId(long,Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 10,
            "defaultPageNo": 1,
            "defaultOrderBy": "replyTime",
            "defaultOrderSort": "asc",
            "supportedOrderBy": [
                "replyTime"
            ],
            "maxPageSize": 120
        },
        "paramInfos": [
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.util.bigindex.BigIndexNotFoundException",
                "name": "BigIndexNotFoundException",
                "httpStatus": 404,
                "code": 404,
                "message": "BIG_INDEX_NOT_FOUND"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/topic/{topicId}/reply",
        "description": "查找某一主题下某人的回帖",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "findRepliesByTopicIdAndReplierId",
        "params": "replierId",
        "method": "FindReplyController.findByTopicAndReplierId(long,long,Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 10,
            "defaultPageNo": 1,
            "defaultOrderBy": "replyTime",
            "defaultOrderSort": "asc",
            "supportedOrderBy": [
                "replyTime"
            ],
            "maxPageSize": 120
        },
        "paramInfos": [
            {
                "name": "replierId",
                "type": null,
                "required": true
            },
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/topic/{topicId}/reply",
        "description": "新建回帖",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "application/json",
        "auth": "createReply",
        "params": "",
        "method": "CreateReplyController.create(CreateReplyForm,long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "replierId",
                "type": null,
                "required": true
            },
            {
                "name": "content",
                "type": null,
                "required": true
            },
            {
                "name": "ip",
                "type": null,
                "required": true
            },
            {
                "name": "source",
                "type": null,
                "required": true
            },
            {
                "name": "attachId",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.topic.create.UserNotExistException",
                "name": "UserNotExistException",
                "httpStatus": 400,
                "code": 400,
                "message": "USER_NOT_EXIST"
            },
            {
                "clazz": "com.liba.api.bbsservice.topic.find.TopicNotFoundException",
                "name": "TopicNotFoundException",
                "httpStatus": 400,
                "code": 400,
                "message": "TOPIC_NOT_FOUND"
            },
            {
                "clazz": "com.liba.api.bbsservice.reply.create.TopicClosedException",
                "name": "TopicClosedException",
                "httpStatus": 403,
                "code": 403,
                "message": "TOPIC_CLOSED"
            },
            {
                "clazz": "com.liba.api.bbsservice.reply.create.TopicReadOnlyException",
                "name": "TopicReadOnlyException",
                "httpStatus": 403,
                "code": 403,
                "message": "TOPIC_READ_ONLY"
            },
            {
                "clazz": "com.liba.api.bbsservice.reply.create.PostReplyTooFastException",
                "name": "PostReplyTooFastException",
                "httpStatus": 400,
                "code": 400,
                "message": "TOO_FAST"
            },
            {
                "clazz": "com.liba.api.bbsservice.DuplicatePostException",
                "name": "DuplicatePostException",
                "httpStatus": 400,
                "code": 400,
                "message": "DUPLICATE_CONTENT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "REPLIER_ID_NULL"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "CONTENT_BLANK"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "IP_BLANK"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/topic/{topicId}/reply/{replyId}",
        "description": "查找回帖",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "findReplyById",
        "params": "",
        "method": "FindReplyController.findByTopicIdAndReplyId(long,long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.reply.update.ReplyIdBlankException",
                "name": "ReplyIdBlankException",
                "httpStatus": 400,
                "code": 400,
                "message": "REPLY_ID_BLANK"
            }
        ]
    },
    {
        "requestMethod": "DELETE",
        "path": "/topic/{topicId}/reply/{replyId}",
        "description": "删除回帖",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "deleteReply",
        "params": "",
        "method": "UpdateReplyController.deleteReply(long,long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST || PUT",
        "path": "/topic/{topicId}/reply/{replyId}",
        "description": "编辑回帖",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "updateReplyContent",
        "params": "",
        "method": "UpdateReplyController.updateContent(long,long,String,long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "content",
                "type": null,
                "required": true
            },
            {
                "name": "editerId",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.reply.update.ReplyIdBlankException",
                "name": "ReplyIdBlankException",
                "httpStatus": 404,
                "code": 404,
                "message": "REPLY_ID_BLANK"
            },
            {
                "clazz": "com.liba.api.bbsservice.reply.update.ContentBlankException",
                "name": "ContentBlankException",
                "httpStatus": 400,
                "code": 400,
                "message": "CONTENT_BLANK"
            },
            {
                "clazz": "com.liba.api.bbsservice.reply.update.EditerIdBlankException",
                "name": "EditerIdBlankException",
                "httpStatus": 400,
                "code": 400,
                "message": "EDITOR_ID_BLANK"
            },
            {
                "clazz": "com.liba.api.bbsservice.topic.create.UserNotExistException",
                "name": "UserNotExistException",
                "httpStatus": 400,
                "code": 400,
                "message": "EDITOR_NOT_EXIST"
            }
        ]
    },
    {
        "requestMethod": "POST || PUT",
        "path": "/topic/{topicId}/reply/{replyId}",
        "description": "编辑附件",
        "header": "",
        "consume": "application/x-www-form-urlencoded",
        "produce": "",
        "auth": "updateReplyAttachId",
        "params": "_service=updateAttachId",
        "method": "UpdateReplyController.updateAttachId(long,long,long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "attachId",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.reply.update.AttachIdBlankException",
                "name": "AttachIdBlankException",
                "httpStatus": 400,
                "code": 400,
                "message": "ATTACH_ID_BLANK"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/topic/{topicId}/tag",
        "description": "获取某一主题的全部标签",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "findTagsByTopicId",
        "params": "",
        "method": "QueryTagController.queryByTopicId(long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "DELETE",
        "path": "/topic/{topicId}/tag/{tagId}",
        "description": "取消主题标签",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "removeTopicTag",
        "params": "",
        "method": "MarkTagController.unMark(long,long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/topic/{topicId}/tag/{tagId}",
        "description": "为主题打标签",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "postTopicTag",
        "params": "",
        "method": "MarkTagController.mark(long,long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.tag.mark.UnsameForumIdException",
                "name": "UnsameForumIdException",
                "httpStatus": 400,
                "code": 400,
                "message": "UNSAME_FORUM_ID"
            },
            {
                "clazz": "com.liba.api.bbsservice.tag.mark.TopicDeletedException",
                "name": "TopicDeletedException",
                "httpStatus": 400,
                "code": 400,
                "message": "TOPIC_DELETED"
            }
        ]
    },
    {
        "requestMethod": "POST",
        "path": "/user",
        "description": "注册会员",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "registerUser",
        "params": "!_service",
        "method": "RegisterUserController.register(UserRegisterForm)",
        "successStatus": "201",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "name",
                "type": null,
                "required": true
            },
            {
                "name": "password",
                "type": null,
                "required": true
            },
            {
                "name": "email",
                "type": null,
                "required": true
            },
            {
                "name": "mobile",
                "type": null,
                "required": true
            },
            {
                "name": "ip",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.user.register.UserNameBannedException",
                "name": "UserNameBannedException",
                "httpStatus": 403,
                "code": 403,
                "message": "USER_NAME_BANNED"
            },
            {
                "clazz": "com.liba.api.user.register.DuplicateUserNameException",
                "name": "DuplicateUserNameException",
                "httpStatus": 403,
                "code": 403,
                "message": "DUPLICATE_USER_NAME"
            },
            {
                "clazz": "com.liba.api.user.register.MobileBannedException",
                "name": "MobileBannedException",
                "httpStatus": 403,
                "code": 403,
                "message": "MOBILE_BANNED"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "NAME_BLANK"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "INVALID_NAME_LENGTH"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "INVALID_NAME_FORMAT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "ERR_MOBILE_FORMAT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "ERR_IP_FORMAT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "IP_BLANK"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/user",
        "description": "根据username和password查找会员",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": null,
        "params": "name && password",
        "method": "FindUserController.findByNameAndPassword(String,String)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/user",
        "description": "根据mobile查找会员",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findUserByMobile",
        "params": "mobile",
        "method": "FindUserController.findSimpleUsersByMobile(String)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/user",
        "description": "根据email查找会员",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findUserByEmail",
        "params": "email",
        "method": "FindUserController.findSimpleUsersByEmail(String)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/user",
        "description": "根据username(like)查找会员",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findUserByNameLike",
        "params": "nameLike",
        "method": "FindUserController.findSimpleUsersByNameLike(String,Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 10,
            "defaultPageNo": 1,
            "defaultOrderBy": "",
            "defaultOrderSort": "asc",
            "supportedOrderBy": [],
            "maxPageSize": 100
        },
        "paramInfos": [
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/user",
        "description": "根据注册时间查找会员",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findUserByRegisterTimeBetween",
        "params": "registerTimeStart && registerTimeEnd",
        "method": "FindUserController.findSimpleUsersByRegisterTimeBetween(int,int,Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 10,
            "defaultPageNo": 1,
            "defaultOrderBy": "",
            "defaultOrderSort": "asc",
            "supportedOrderBy": [
                "registerTime"
            ],
            "maxPageSize": 100
        },
        "paramInfos": [
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/user",
        "description": "根据username查找会员",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": null,
        "params": "name && !password",
        "method": "FindUserController.findByName(String)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/user",
        "description": "查找与指定会员有相同密码的会员",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findUserOfSamePassword",
        "params": "_service=findSamePassword && userId",
        "method": "SpecialUserQueryController.findSimpleUsersOfSamePassword(long,Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 10,
            "defaultPageNo": 1,
            "defaultOrderBy": "",
            "defaultOrderSort": "asc",
            "supportedOrderBy": [],
            "maxPageSize": 100
        },
        "paramInfos": [
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/user",
        "description": "查找与指定会员有相同注册ip的会员",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findUserOfSameIp",
        "params": "_service=findSameIp && userId",
        "method": "SpecialUserQueryController.findSimpleUsersBySameIp(long,Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 10,
            "defaultPageNo": 1,
            "defaultOrderBy": "",
            "defaultOrderSort": "asc",
            "supportedOrderBy": [],
            "maxPageSize": 100
        },
        "paramInfos": [
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/user",
        "description": "查找与指定会员有相同注册ip和相同密码的会员",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findUserOfSamePasswordAndIp",
        "params": "_service=findSamePasswordAndIp && userId",
        "method": "SpecialUserQueryController.findSimpleUsersOfSamePasswordAndIp(long,Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 10,
            "defaultPageNo": 1,
            "defaultOrderBy": "",
            "defaultOrderSort": "asc",
            "supportedOrderBy": [],
            "maxPageSize": 100
        },
        "paramInfos": [
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/user/{id}",
        "description": "根据id查找会员",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": null,
        "params": "",
        "method": "FindUserController.findById(Long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "PUT",
        "path": "/user/{id}",
        "description": "更新会员密码",
        "header": "",
        "consume": "",
        "produce": "application/json",
        "auth": "updateUserPassword",
        "params": "password",
        "method": "UpdateUserPasswordController.updatePassword(Long,String)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/user/{id}/contact",
        "description": "查找会员联系方式",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf8",
        "auth": "getUserContact",
        "params": "",
        "method": "GetUserContactController.findUserContactById(Long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "PUT",
        "path": "/user/{id}/contact",
        "description": "更新会员联系方式",
        "header": "",
        "consume": "",
        "produce": "",
        "auth": "updateUserContact",
        "params": "",
        "method": "UpdateUserContactController.updateUserContact(long,UpdateUserContactForm)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "email",
                "type": null,
                "required": true
            },
            {
                "name": "mobile",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "ERR_EMAIL_FORMAT"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "ERR_MOBILE_FORMAT"
            }
        ]
    },
    {
        "requestMethod": "PUT",
        "path": "/user/{userId}",
        "description": "更新会员地区",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "updateUserArea",
        "params": "province && city && district",
        "method": "UpdateUserAreaController.updateUserArea(long,Area)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "province",
                "type": null,
                "required": true
            },
            {
                "name": "city",
                "type": null,
                "required": true
            },
            {
                "name": "district",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "INVALID_PROVINCE_LENGTH"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "INVALID_CITY_LENGTH"
            },
            {
                "clazz": "com.liba.spring.rest.BadRequest400Exception",
                "name": "BadRequest400Exception",
                "httpStatus": 400,
                "code": 400,
                "message": "INVALID_DISTRICT_LENGTH"
            }
        ]
    },
    {
        "requestMethod": "PUT",
        "path": "/user/{userId}",
        "description": "更新会员工分",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "updateUserScore",
        "params": "score",
        "method": "UpdateUserScoreController.updateUserScore(long,int)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "PUT",
        "path": "/user/{userId}",
        "description": "更新会员性别",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "updateGender",
        "params": "gender",
        "method": "UpdateUserGenderController.updateGender(long,Gender)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "PUT",
        "path": "/user/{userId}",
        "description": "更新会员头衔",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "updateUserTitle",
        "params": "title",
        "method": "UpdateUserTitleController.updateUserTitle(long,String)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "PUT",
        "path": "/user/{userId}",
        "description": "更新会员签名",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "updateUserSignature",
        "params": "signature",
        "method": "UpdateUserSignatureController.updateUserSignature(long,String)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "PUT",
        "path": "/user/{userId}",
        "description": "更新会员block状态",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "updateUserBlockStatus",
        "params": "blocked",
        "method": "UpdateUserBlockStatusController.updateUserBlock(long,boolean)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/user/{userId}/allTopics || /user/{userId}/repliedTopics",
        "description": "查找会员回复过的帖子",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findRepliedTopicsByUser",
        "params": "",
        "method": "FindUserTopicsController.findReplied(Long,Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 10,
            "defaultPageNo": 1,
            "defaultOrderBy": "createTime",
            "defaultOrderSort": "desc",
            "supportedOrderBy": [
                "createTime"
            ],
            "maxPageSize": 40
        },
        "paramInfos": [
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "POST",
        "path": "/user/{userId}/favoriteTag",
        "description": "批量新增会员关注标签",
        "header": "",
        "consume": "",
        "produce": "",
        "auth": "createUserFavoriteTags",
        "params": "_service=batchAdd",
        "method": "FavoriteTagController.batchAdd(long,long[])",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "tagId",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.topic.create.UserNotExistException",
                "name": "UserNotExistException",
                "httpStatus": 404,
                "code": 404,
                "message": "USER_NOT_FOUND"
            },
            {
                "clazz": "com.liba.api.bbsservice.tag.TagNotExistException",
                "name": "TagNotExistException",
                "httpStatus": 404,
                "code": 404,
                "message": "TAG_NOT_FOUND"
            }
        ]
    },
    {
        "requestMethod": "DELETE",
        "path": "/user/{userId}/favoriteTag",
        "description": "批量取消会员关注标签",
        "header": "",
        "consume": "",
        "produce": "",
        "auth": "deleteUserFavoriteTags",
        "params": "_service=batchDelete",
        "method": "FavoriteTagController.batchDelete(long,long[])",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "tagId",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.topic.create.UserNotExistException",
                "name": "UserNotExistException",
                "httpStatus": 404,
                "code": 404,
                "message": "USER_NOT_FOUND"
            }
        ]
    },
    {
        "requestMethod": "POST",
        "path": "/user/{userId}/favoriteTag",
        "description": "新增会员关注标签",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "createUserFavoriteTag",
        "params": "",
        "method": "FavoriteTagController.add(long,long)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [
            {
                "name": "tagId",
                "type": null,
                "required": true
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.topic.create.UserNotExistException",
                "name": "UserNotExistException",
                "httpStatus": 404,
                "code": 404,
                "message": "USER_NOT_FOUND"
            },
            {
                "clazz": "com.liba.api.bbsservice.tag.TagNotExistException",
                "name": "TagNotExistException",
                "httpStatus": 404,
                "code": 404,
                "message": "TAG_NOT_FOUND"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/user/{userId}/favoriteTag/",
        "description": "获取会员关注的所有标签",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findUserFavoriteTagsByUserId",
        "params": "",
        "method": "FavoriteTagController.getAll(long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.topic.create.UserNotExistException",
                "name": "UserNotExistException",
                "httpStatus": 404,
                "code": 404,
                "message": "USER_NOT_FOUND"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/user/{userId}/favoriteTag/{tagId}",
        "description": "获取会员关注的某一标签",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findUserFavoriteTagByUserIdAndTagId",
        "params": "",
        "method": "FavoriteTagController.get(long,long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "DELETE",
        "path": "/user/{userId}/favoriteTag/{tagId}",
        "description": "取消会员关注标签",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "deleteUserFavoriteTag",
        "params": "",
        "method": "FavoriteTagController.delete(long,long)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.topic.create.UserNotExistException",
                "name": "UserNotExistException",
                "httpStatus": 404,
                "code": 404,
                "message": "USER_NOT_FOUND"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/user/{userId}/openIdBinding",
        "description": "查找会员绑定的openId",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findOpenIdByUserId",
        "params": "",
        "method": "FindOpenIdBindingByUserController.findByUser(long)",
        "successStatus": "200",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": []
    },
    {
        "requestMethod": "DELETE",
        "path": "/user/{userId}/openIdBinding/{provider}",
        "description": "解除openId绑定",
        "header": "",
        "consume": "",
        "produce": "",
        "auth": "unbindUserOpenId",
        "params": "",
        "method": "UnbindOpenIdController.deleteOpenIdBinding(long,String)",
        "successStatus": "204",
        "pageInfo": null,
        "paramInfos": [],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.openidsession.UnknownOAuthProviderException",
                "name": "UnknownOAuthProviderException",
                "httpStatus": 400,
                "code": 400,
                "message": "UNKNOWN_PROVIDER"
            }
        ]
    },
    {
        "requestMethod": "GET",
        "path": "/user/{userId}/postTopics",
        "description": "查找会员发表过的帖子",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findPostTopicsByUser",
        "params": "",
        "method": "FindUserTopicsController.findPost(Long,Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 10,
            "defaultPageNo": 1,
            "defaultOrderBy": "createTime",
            "defaultOrderSort": "desc",
            "supportedOrderBy": [
                "createTime"
            ],
            "maxPageSize": 40
        },
        "paramInfos": [
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": []
    },
    {
        "requestMethod": "GET",
        "path": "/user/{userId}/topicStream",
        "description": "获取会员关注的主题",
        "header": "",
        "consume": "",
        "produce": "application/json;charset=utf-8",
        "auth": "findTopicStreamByUserId",
        "params": "",
        "method": "FindTopicStreamController.findStreamByUserId(long,Page)",
        "successStatus": "200",
        "pageInfo": {
            "defaultPageSize": 10,
            "defaultPageNo": 1,
            "defaultOrderBy": "lastReplyTime",
            "defaultOrderSort": "desc",
            "supportedOrderBy": [
                "lastReplyTime"
            ],
            "maxPageSize": 40
        },
        "paramInfos": [
            {
                "name": "_orderBy",
                "type": "string",
                "required": false
            },
            {
                "name": "_orderSort",
                "type": "string",
                "required": false
            },
            {
                "name": "_pageNo",
                "type": "int",
                "required": false
            },
            {
                "name": "_pageSize",
                "type": "int",
                "required": false
            }
        ],
        "exceptionInfos": [
            {
                "clazz": "com.liba.api.bbsservice.topic.create.UserNotExistException",
                "name": "UserNotExistException",
                "httpStatus": 404,
                "code": 404,
                "message": "USER_NOT_FOUND"
            }
        ]
    }
]